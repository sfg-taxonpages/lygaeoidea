import{s as u,m as i,k as l,b as n,d as r,e as t,F as d,l as p,g as f}from"./index-KHXQrMPW.js";import g from"./IconImage-DEII5m9z.js";import b from"./IconMicroscope-ta-C1IdO.js";import _ from"./IconReference-CGSK74cp.js";import v from"./IconOk-BmbmyW6q.js";import x from"./iconCitation-BcmtOk10.js";import S from"./DataType-BZ0C9raa.js";const k={class:"bg-base-foreground"},I={class:"container mx-auto"},y={class:"max-h-max grid grid-cols-2 sm:grid-cols-4 grid-col auto-cols-fr xl:grid-flow-col lg:py-18 xl:py-28 py-10 gap-10"},V={__name:"SectionData",setup(h){const o={validSpecies:"Valid species",taxonNames:"Taxon names",projectSources:"Project sources",mediaSounds:"Media sounds",collectionObjects:"Collection objects",citations:"Citations",images:"Images"},a=u({[o.validSpecies]:{icon:v,label:"Valid species",count:0},[o.taxonNames]:{icon:b,label:"Scientific names",count:0},[o.projectSources]:{icon:_,label:"References",count:0},[o.citations]:{icon:x,label:"Citations",count:0},[o.images]:{icon:g,label:"Images",count:0}});return i("/stats").then(c=>{const{data:s}=c.data;for(const e in s)a.value[e]&&(a.value[e].count=s[e]);l(a)}),i("/taxon_names.json",{params:{per:1,validity:!0,rank:["NomenclaturalRank::Iczn::SpeciesGroup::Species"]}}).then(({headers:c})=>{a.value[o.validSpecies].count=Number(c["pagination-total"]),l(a)}),(c,s)=>(n(),r("section",null,[t("div",k,[t("div",I,[t("div",y,[(n(!0),r(d,null,p(a.value,(e,m)=>(n(),f(S,{class:"px-4",key:m,icon:e.icon,label:e.label,count:e.count},null,8,["icon","label","count"]))),128))])])]),s[0]||(s[0]=t("div",{class:"bg-base-foreground"},[t("div",{class:"container mx-auto"})],-1))]))}};export{V as default};
